# ================= IMPORTS =================
import discord
from discord.ext import commands, tasks
from discord.ui import Button, View, Modal, TextInput, Select
import os
import sys
import sqlite3
import asyncio
import random
import logging
import aiohttp
import time
from datetime import timedelta, datetime, timezone
from discord.ext.commands import BucketType, cooldown
from pathlib import Path
from dotenv import load_dotenv
import collections
import threading
import json
from typing import Optional, Dict, Any

# Load environment variables
load_dotenv()

# ================= CONFIGURA√á√ïES =================
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.presences = True
intents.voice_states = True

bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# ================= SISTEMA ANTI-DUPLICA√á√ÉO =================
active_panels = {}
panel_cooldown = {}
command_executions = collections.defaultdict(list)

def log_command_execution(command_name, user_id, context):
    """Registra execu√ß√£o de comando para detectar duplica√ß√µes"""
    current_time = datetime.now()
    command_executions[f"{command_name}_{user_id}"].append({
        'timestamp': current_time,
        'context': context,
        'channel_id': getattr(context.channel, 'id', 'unknown')
    })
    
    # Limpa execu√ß√µes antigas (mais de 1 minuto)
    cutoff_time = current_time - timedelta(minutes=1)
    command_executions[f"{command_name}_{user_id}"] = [
        exec_data for exec_data in command_executions[f"{command_name}_{user_id}"]
        if exec_data['timestamp'] > cutoff_time
    ]

# ================= BANCO DE DADOS =================
DB_PATH = Path(__file__).parent / "config.db"
CONFIG_DB_PATH = Path(__file__).parent / "perm_config.db"

def get_db():
    """Retorna conex√£o com banco de dados"""
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        conn.execute("PRAGMA foreign_keys = ON")
        return conn
    except sqlite3.Error as e:
        print(f"Erro ao conectar ao banco: {e}")
        raise

def init_db():
    """Inicializa banco de dados"""
    try:
        conn = get_db()
        
        # Tabela de usu√°rios
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            money INTEGER DEFAULT 0,
            bank INTEGER DEFAULT 0,
            rep INTEGER DEFAULT 0,
            xp INTEGER DEFAULT 0,
            level INTEGER DEFAULT 1,
            last_daily TEXT,
            last_rep TEXT,
            last_work TEXT,
            about_me TEXT,
            vip INTEGER DEFAULT 0,
            vip_level INTEGER DEFAULT 0,
            family_id INTEGER,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # Tabela de fam√≠lias
        conn.execute("""
        CREATE TABLE IF NOT EXISTS families (
            family_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            leader_id INTEGER NOT NULL,
            description TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            member_count INTEGER DEFAULT 1
        )
        """)
        
        # Tabela de advert√™ncias
        conn.execute("""
        CREATE TABLE IF NOT EXISTS warns (
            warn_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            moderator_id INTEGER NOT NULL,
            reason TEXT NOT NULL,
            timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
            server_id INTEGER NOT NULL,
            active INTEGER DEFAULT 1
        )
        """)
        
        # Tabela de staff
        conn.execute("""
        CREATE TABLE IF NOT EXISTS staff (
            user_id INTEGER PRIMARY KEY,
            role TEXT NOT NULL,
            permissions TEXT,
            join_date TEXT DEFAULT CURRENT_TIMESTAMP,
            server_id INTEGER NOT NULL,
            points INTEGER DEFAULT 0
        )
        """)
        
        # Tabela de primeira dama
        conn.execute("""
        CREATE TABLE IF NOT EXISTS primeira_dama (
            server_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            cargo_name TEXT DEFAULT 'Primeira Dama',
            data_indicacao TEXT DEFAULT CURRENT_TIMESTAMP,
            active INTEGER DEFAULT 1,
            PRIMARY KEY (server_id, user_id)
        )
        """)
        
        # Tabela de trabalhos
        conn.execute("""
        CREATE TABLE IF NOT EXISTS jobs (
            job_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            emoji TEXT,
            min_pay INTEGER NOT NULL,
            max_pay INTEGER NOT NULL,
            description TEXT,
            cooldown INTEGER DEFAULT 3600,
            required_level INTEGER DEFAULT 1
        )
        """)
        
        conn.commit()
        conn.close()
        print("‚úÖ Banco de dados inicializado!")
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar banco: {e}")

def init_perm_db():
    """Inicializa banco de permiss√µes"""
    try:
        conn = sqlite3.connect(CONFIG_DB_PATH)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS server_config (
            server_id INTEGER PRIMARY KEY,
            admin_role_id INTEGER DEFAULT NULL,
            mod_role_id INTEGER DEFAULT NULL,
            dono_bot_role_id INTEGER DEFAULT NULL,
            pd_role_id INTEGER DEFAULT NULL,
            prefix TEXT DEFAULT '!'
        )
        """)
        conn.commit()
        conn.close()
        print("‚úÖ Banco de permiss√µes inicializado!")
    except Exception as e:
        print(f"‚ùå Erro ao inicializar permiss√µes: {e}")

# ================= VERIFICA√á√ÉO DE PERMISS√ïES =================
async def check_admin(ctx):
    """Verifica se usu√°rio √© admin"""
    if await ctx.bot.is_owner(ctx.author):
        return True
    return ctx.author.guild_permissions.administrator

async def check_mod(ctx):
    """Verifica se usu√°rio √© moderador"""
    if await check_admin(ctx):
        return True
    return ctx.author.guild_permissions.manage_messages

# ================= FAMILY SYSTEM =================
class FamiliaView(View):
    def __init__(self):
        super().__init__(timeout=300)
        
    async def on_timeout(self):
        # Remove from active panels when timeout
        for channel_id, view in list(active_panels.items()):
            if view == self:
                del active_panels[channel_id]
                break

    @discord.ui.button(label="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Criar Fam√≠lia", style=discord.ButtonStyle.green, emoji="‚ûï")
    async def criar_familia(self, interaction: discord.Interaction, button: Button):
        modal = CriarFamiliaModal()
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="üë• Entrar na Fam√≠lia", style=discord.ButtonStyle.primary, emoji="üö™")
    async def entrar_familia(self, interaction: discord.Interaction, button: Button):
        modal = EntrarFamiliaModal()
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="üìä Info da Fam√≠lia", style=discord.ButtonStyle.secondary, emoji="‚ÑπÔ∏è")
    async def info_familia(self, interaction: discord.Interaction, button: Button):
        await mostrar_info_familia(interaction)

    @discord.ui.button(label="üö™ Sair da Fam√≠lia", style=discord.ButtonStyle.red, emoji="‚ùå")
    async def sair_familia(self, interaction: discord.Interaction, button: Button):
        await deixar_familia(interaction)

class CriarFamiliaModal(Modal):
    def __init__(self):
        super().__init__(title="Criar Nova Fam√≠lia")
        
        self.nome_familia = TextInput(
            label="Nome da Fam√≠lia",
            placeholder="Digite o nome da sua fam√≠lia...",
            max_length=50,
            required=True
        )
        self.add_item(self.nome_familia)

    async def on_submit(self, interaction: discord.Interaction):
        nome = self.nome_familia.value
        user_id = interaction.user.id
        
        try:
            conn = get_db()
            
            # Check if user already has a family
            existing = conn.execute(
                "SELECT family_id FROM users WHERE user_id = ?", (user_id,)
            ).fetchone()
            
            if existing and existing[0]:
                await interaction.response.send_message("‚ùå Voc√™ j√° est√° em uma fam√≠lia!", ephemeral=True)
                return
            
            # Check if family name exists
            name_exists = conn.execute(
                "SELECT family_id FROM families WHERE name = ?", (nome,)
            ).fetchone()
            
            if name_exists:
                await interaction.response.send_message("‚ùå J√° existe uma fam√≠lia com este nome!", ephemeral=True)
                return
            
            # Create family
            cursor = conn.execute(
                "INSERT INTO families (name, leader_id, created_at) VALUES (?, ?, ?)",
                (nome, user_id, datetime.now().isoformat())
            )
            family_id = cursor.lastrowid
            
            # Add user to family
            conn.execute(
                "INSERT OR REPLACE INTO users (user_id, family_id) VALUES (?, ?)",
                (user_id, family_id)
            )
            
            conn.commit()
            conn.close()
            
            embed = discord.Embed(
                title="‚úÖ Fam√≠lia Criada!",
                description=f"A fam√≠lia **{nome}** foi criada com sucesso!\n\nVoc√™ agora √© o l√≠der desta fam√≠lia.",
                color=0x00ff00
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Erro ao criar fam√≠lia: {e}")
            await interaction.response.send_message("‚ùå Erro ao criar fam√≠lia!", ephemeral=True)

class EntrarFamiliaModal(Modal):
    def __init__(self):
        super().__init__(title="Entrar em Fam√≠lia")
        
        self.nome_familia = TextInput(
            label="Nome da Fam√≠lia",
            placeholder="Digite o nome da fam√≠lia que deseja entrar...",
            max_length=50,
            required=True
        )
        self.add_item(self.nome_familia)

    async def on_submit(self, interaction: discord.Interaction):
        nome = self.nome_familia.value
        user_id = interaction.user.id
        
        try:
            conn = get_db()
            
            # Check if user already has a family
            existing = conn.execute(
                "SELECT family_id FROM users WHERE user_id = ?", (user_id,)
            ).fetchone()
            
            if existing and existing[0]:
                await interaction.response.send_message("‚ùå Voc√™ j√° est√° em uma fam√≠lia!", ephemeral=True)
                return
            
            # Find family
            family = conn.execute(
                "SELECT family_id FROM families WHERE name = ?", (nome,)
            ).fetchone()
            
            if not family:
                await interaction.response.send_message("‚ùå Fam√≠lia n√£o encontrada!", ephemeral=True)
                return
            
            # Add user to family
            conn.execute(
                "INSERT OR REPLACE INTO users (user_id, family_id) VALUES (?, ?)",
                (user_id, family[0])
            )
            
            conn.commit()
            conn.close()
            
            embed = discord.Embed(
                title="‚úÖ Entrou na Fam√≠lia!",
                description=f"Voc√™ agora faz parte da fam√≠lia **{nome}**!",
                color=0x00ff00
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Erro ao entrar na fam√≠lia: {e}")
            await interaction.response.send_message("‚ùå Erro ao entrar na fam√≠lia!", ephemeral=True)

async def mostrar_info_familia(interaction: discord.Interaction):
    user_id = interaction.user.id
    
    try:
        conn = get_db()
        
        # Get user's family info
        family_info = conn.execute("""
            SELECT f.name, f.leader_id, f.created_at, COUNT(u.user_id) as member_count
            FROM users u
            JOIN families f ON u.family_id = f.family_id
            WHERE u.user_id = ?
            GROUP BY f.family_id, f.name, f.leader_id, f.created_at
        """, (user_id,)).fetchone()
        
        conn.close()
        
        if not family_info:
            await interaction.response.send_message("‚ùå Voc√™ n√£o est√° em nenhuma fam√≠lia!", ephemeral=True)
            return
        
        name, leader_id, created_at, member_count = family_info
        
        embed = discord.Embed(
            title=f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Fam√≠lia: {name}",
            color=0x3498db
        )
        embed.add_field(name="üëë L√≠der", value=f"<@{leader_id}>", inline=True)
        embed.add_field(name="üë• Membros", value=str(member_count), inline=True)
        embed.add_field(name="üìÖ Criada em", value=created_at[:10], inline=True)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        print(f"Erro ao buscar info da fam√≠lia: {e}")
        await interaction.response.send_message("‚ùå Erro ao buscar informa√ß√µes da fam√≠lia!", ephemeral=True)

async def deixar_familia(interaction: discord.Interaction):
    user_id = interaction.user.id
    
    try:
        conn = get_db()
        
        # Check if user is in a family
        family_info = conn.execute(
            "SELECT family_id FROM users WHERE user_id = ?", (user_id,)
        ).fetchone()
        
        if not family_info or not family_info[0]:
            await interaction.response.send_message("‚ùå Voc√™ n√£o est√° em nenhuma fam√≠lia!", ephemeral=True)
            return
        
        family_id = family_info[0]
        
        # Check if user is the leader
        is_leader = conn.execute(
            "SELECT family_id FROM families WHERE family_id = ? AND leader_id = ?",
            (family_id, user_id)
        ).fetchone()
        
        if is_leader:
            await interaction.response.send_message("‚ùå L√≠deres n√£o podem sair da fam√≠lia! Transfira a lideran√ßa primeiro.", ephemeral=True)
            return
        
        # Remove user from family
        conn.execute(
            "UPDATE users SET family_id = NULL WHERE user_id = ?", (user_id,)
        )
        
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Saiu da Fam√≠lia!",
            description="Voc√™ saiu da fam√≠lia com sucesso.",
            color=0xff9900
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        print(f"Erro ao sair da fam√≠lia: {e}")
        await interaction.response.send_message("‚ùå Erro ao sair da fam√≠lia!", ephemeral=True)

# ================= EVENTS =================
@bot.event
async def on_ready():
    print(f'ü§ñ Bot {bot.user} est√° online!')
    print(f'üìä Conectado em {len(bot.guilds)} servidores')
    
    # Initialize database
    init_db()
    init_perm_db()
    
    # Start background tasks
    cleanup_panels.start()
    
    # Set bot status
    await bot.change_presence(
        activity=discord.Activity(type=discord.ActivityType.watching, name="!ajuda | by SquareCloud")
    )

@tasks.loop(minutes=5)
async def cleanup_panels():
    """Clean up expired panels"""
    current_time = time.time()
    expired_channels = [
        channel_id for channel_id, timestamp in panel_cooldown.items()
        if current_time - timestamp > 300  # 5 minutes
    ]
    for channel_id in expired_channels:
        if channel_id in active_panels:
            del active_panels[channel_id]
        del panel_cooldown[channel_id]

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è∞ Calma! Tente novamente em {error.retry_after:.1f} segundos.")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Voc√™ n√£o tem permiss√£o para usar este comando!")
    elif isinstance(error, commands.CommandNotFound):
        return  # Ignore unknown commands
    else:
        print(f"Erro no comando {ctx.command}: {error}")
        await ctx.send("‚ùå Ocorreu um erro interno. Tente novamente mais tarde.")

# ================= FAMILIA COMMAND (FIXED) =================
@bot.command(name='f', aliases=['familia'])
@cooldown(1, 10, BucketType.channel)  # Cooldown por canal, n√£o por usu√°rio
async def familia_panel(ctx):
    """Abre o painel de fam√≠lias - CORRIGIDO CONTRA DUPLICA√á√ÉO"""
    
    # Check if there's already an active panel in this channel
    channel_id = ctx.channel.id
    current_time = time.time()
    
    # Check cooldown for this channel
    if channel_id in panel_cooldown:
        if current_time - panel_cooldown[channel_id] < 10:  # 10 second cooldown
            await ctx.send("‚è∞ Aguarde alguns segundos antes de abrir outro painel!", delete_after=3)
            return
    
    # Remove existing panel from this channel
    if channel_id in active_panels:
        try:
            old_message = active_panels[channel_id]
            if hasattr(old_message, 'delete'):
                await old_message.delete()
        except:
            pass
        del active_panels[channel_id]
    
    # Update cooldown
    panel_cooldown[channel_id] = current_time
    
    embed = discord.Embed(
        title="ü§ñ Painel Principal do Bot",
        description="Acesse todas as funcionalidades atrav√©s dos bot√µes abaixo:",
        color=0x3498db
    )
    
    # Apar√™ncia
    embed.add_field(
        name="üé≠ Apar√™ncia",
        value="`andar`, `setavatar`, `setbanner`, `setusername`",
        inline=False
    )
    
    # Economia
    embed.add_field(
        name="üí∏ Economia",
        value="`carteira`, `daily`, `depositar`, `empregos`, `trabalhar`",
        inline=False
    )
    
    # Primeira Dama
    embed.add_field(
        name="üíç Primeira Dama",
        value="`pd`",
        inline=False
    )
    
    # Informativo
    embed.add_field(
        name="‚ùó Informativo",
        value="`ajuda`, `botinfo`, `ping`",
        inline=False
    )
    
    # Modera√ß√£o
    embed.add_field(
        name="üëÆ Modera√ß√£o",
        value="`warn`, `ban`, `kick`, `mute`, `lock`, `nuke`, `castigar`",
        inline=False
    )
    
    # Social
    embed.add_field(
        name="üéØ Social",
        value="`avatar`, `perfil`, `rep`, `sobremim`, `influencer`, `tellonym`",
        inline=False
    )
    
    # Staff
    embed.add_field(
        name="üß© Staff",
        value="`migrar`, `recrutar`, `register`, `tempo`, `verificar`",
        inline=False
    )
    
    # VIP e Fam√≠lias
    embed.add_field(
        name="‚≠ê VIP & Fam√≠lias",
        value="`familia`, `addvip`, `addfamily` - Use os bot√µes abaixo!",
        inline=False
    )
    
    # Integra√ß√µes
    embed.add_field(
        name="üîó Integra√ß√µes",
        value="`instagram`, `tellonym`",
        inline=False
    )
    
    embed.set_footer(text="Use ! antes de cada comando ‚Ä¢ Este painel expira em 5 minutos")
    
    view = FamiliaView()
    message = await ctx.send(embed=embed, view=view)
    
    # Store the message to prevent duplicates
    active_panels[channel_id] = message
    
    log_command_execution("familia", ctx.author.id, ctx)

# ================= APAR√äNCIA COMMANDS =================
@bot.command(name='andar')
@cooldown(1, 5, BucketType.user)
async def andar(ctx):
    """Simula uma caminhada"""
    actions = [
        "üö∂‚Äç‚ôÇÔ∏è deu uma volta pela pra√ßa",
        "üèÉ‚Äç‚ôÇÔ∏è correu at√© o parque",
        "üö∂‚Äç‚ôÄÔ∏è caminhou pela praia",
        "üèÉ‚Äç‚ôÄÔ∏è fez uma corrida matinal",
        "üö∂‚Äç‚ôÇÔ∏è passeou pelo centro da cidade"
    ]
    
    action = random.choice(actions)
    embed = discord.Embed(
        title="üö∂‚Äç‚ôÇÔ∏è Caminhada",
        description=f"{ctx.author.mention} {action}!",
        color=0x00ff00
    )
    await ctx.send(embed=embed)

@bot.command(name='setavatar')
@commands.check(check_admin)
async def set_avatar(ctx, url: str):
    """Define o avatar do bot"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    avatar_bytes = await resp.read()
                    await bot.user.edit(avatar=avatar_bytes)
                    await ctx.send("‚úÖ Avatar alterado com sucesso!")
                else:
                    await ctx.send("‚ùå N√£o foi poss√≠vel baixar a imagem!")
    except Exception as e:
        await ctx.send(f"‚ùå Erro ao alterar avatar: {e}")

@bot.command(name='setbanner')
@commands.check(check_admin)
async def set_banner(ctx, url: str):
    """Define o banner do bot"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    banner_bytes = await resp.read()
                    await bot.user.edit(banner=banner_bytes)
                    await ctx.send("‚úÖ Banner alterado com sucesso!")
                else:
                    await ctx.send("‚ùå N√£o foi poss√≠vel baixar a imagem!")
    except Exception as e:
        await ctx.send(f"‚ùå Erro ao alterar banner: {e}")

@bot.command(name='setusername')
@commands.check(check_admin)
async def set_username(ctx, *, nome: str):
    """Altera o nome do bot"""
    try:
        await bot.user.edit(username=nome)
        await ctx.send(f"‚úÖ Nome alterado para: {nome}")
    except Exception as e:
        await ctx.send(f"‚ùå Erro ao alterar nome: {e}")

# ================= ECONOMIA COMMANDS =================
def ensure_user_exists(user_id):
    """Garante que o usu√°rio existe no banco"""
    try:
        conn = get_db()
        conn.execute(
            "INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,)
        )
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"Erro ao criar usu√°rio: {e}")

@bot.command(name='carteira', aliases=['wallet', 'bal', 'balance'])
@cooldown(1, 3, BucketType.user)
async def carteira(ctx, user: discord.Member = None):
    """Mostra a carteira do usu√°rio"""
    if user is None:
        user = ctx.author
    
    ensure_user_exists(user.id)
    
    try:
        conn = get_db()
        user_data = conn.execute(
            "SELECT money, bank, rep, level FROM users WHERE user_id = ?", (user.id,)
        ).fetchone()
        conn.close()
        
        if not user_data:
            money = bank = rep = 0
            level = 1
        else:
            money, bank, rep, level = user_data
        
        total = money + bank
        
        embed = discord.Embed(
            title=f"üí∞ Carteira de {user.display_name}",
            color=0xf1c40f
        )
        embed.add_field(name="üíµ Dinheiro", value=f"${money:,}", inline=True)
        embed.add_field(name="üè¶ Banco", value=f"${bank:,}", inline=True)
        embed.add_field(name="üíé Total", value=f"${total:,}", inline=True)
        embed.add_field(name="‚≠ê Reputa√ß√£o", value=f"{rep}", inline=True)
        embed.add_field(name="üèÜ N√≠vel", value=f"{level}", inline=True)
        embed.set_thumbnail(url=user.display_avatar.url)
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro na carteira: {e}")
        await ctx.send("‚ùå Erro ao buscar informa√ß√µes da carteira!")

@bot.command(name='daily', aliases=['diario'])
@cooldown(1, 86400, BucketType.user)  # 24 horas
async def daily(ctx):
    """Recompensa di√°ria"""
    user_id = ctx.author.id
    ensure_user_exists(user_id)
    
    # Valor aleat√≥rio entre 100-500
    amount = random.randint(100, 500)
    
    try:
        conn = get_db()
        conn.execute(
            "UPDATE users SET money = money + ?, last_daily = ? WHERE user_id = ?",
            (amount, datetime.now().isoformat(), user_id)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="üí∞ Daily Coletado!",
            description=f"Voc√™ recebeu **${amount:,}**!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro no daily: {e}")
        await ctx.send("‚ùå Erro ao coletar daily!")

@bot.command(name='depositar', aliases=['dep'])
@cooldown(1, 3, BucketType.user)
async def depositar(ctx, amount: int):
    """Deposita dinheiro no banco"""
    if amount <= 0:
        await ctx.send("‚ùå Quantidade inv√°lida!")
        return
    
    user_id = ctx.author.id
    ensure_user_exists(user_id)
    
    try:
        conn = get_db()
        user_data = conn.execute(
            "SELECT money FROM users WHERE user_id = ?", (user_id,)
        ).fetchone()
        
        if not user_data or user_data[0] < amount:
            await ctx.send("‚ùå Voc√™ n√£o tem dinheiro suficiente!")
            return
        
        conn.execute(
            "UPDATE users SET money = money - ?, bank = bank + ? WHERE user_id = ?",
            (amount, amount, user_id)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="üè¶ Dep√≥sito Realizado!",
            description=f"Voc√™ depositou **${amount:,}** no banco!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro no dep√≥sito: {e}")
        await ctx.send("‚ùå Erro ao depositar!")

@bot.command(name='empregos', aliases=['jobs'])
@cooldown(1, 5, BucketType.user)
async def empregos(ctx):
    """Lista trabalhos dispon√≠veis"""
    jobs = [
        {"name": "üçï Entregador de Pizza", "pay": "50-150", "level": 1},
        {"name": "üöó Motorista Uber", "pay": "80-200", "level": 1},
        {"name": "üíª Programador", "pay": "200-500", "level": 5},
        {"name": "üè• M√©dico", "pay": "300-800", "level": 10},
        {"name": "üëÆ‚Äç‚ôÇÔ∏è Policial", "pay": "150-400", "level": 3},
    ]
    
    embed = discord.Embed(
        title="üíº Trabalhos Dispon√≠veis",
        description="Use `!trabalhar` para ganhar dinheiro!",
        color=0x3498db
    )
    
    for job in jobs:
        embed.add_field(
            name=job["name"],
            value=f"üí∞ ${job['pay']}\nüèÜ N√≠vel {job['level']}+",
            inline=True
        )
    
    await ctx.send(embed=embed)

@bot.command(name='trabalhar', aliases=['work'])
@cooldown(1, 3600, BucketType.user)  # 1 hora
async def trabalhar(ctx):
    """Trabalha para ganhar dinheiro"""
    user_id = ctx.author.id
    ensure_user_exists(user_id)
    
    jobs = [
        {"name": "üçï Entregou pizzas", "pay": (50, 150)},
        {"name": "üöó Dirigiu para o Uber", "pay": (80, 200)},
        {"name": "üíª Programou um sistema", "pay": (200, 500)},
        {"name": "üè• Atendeu pacientes", "pay": (300, 800)},
        {"name": "üëÆ‚Äç‚ôÇÔ∏è Patrulhou a cidade", "pay": (150, 400)},
    ]
    
    job = random.choice(jobs)
    payment = random.randint(*job["pay"])
    
    try:
        conn = get_db()
        conn.execute(
            "UPDATE users SET money = money + ?, last_work = ? WHERE user_id = ?",
            (payment, datetime.now().isoformat(), user_id)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="üíº Trabalho Conclu√≠do!",
            description=f"{job['name']} e ganhou **${payment:,}**!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro no trabalho: {e}")
        await ctx.send("‚ùå Erro ao trabalhar!")

# ================= PRIMEIRA DAMA =================
@bot.command(name='pd')
@commands.check(check_admin)
async def primeira_dama(ctx, user: discord.Member, *, cargo_name: str = "Primeira Dama"):
    """Define primeira dama do servidor"""
    try:
        conn = get_db()
        
        # Remove current PD
        conn.execute(
            "UPDATE primeira_dama SET active = 0 WHERE server_id = ?", (ctx.guild.id,)
        )
        
        # Add new PD
        conn.execute(
            "INSERT OR REPLACE INTO primeira_dama (server_id, user_id, cargo_name) VALUES (?, ?, ?)",
            (ctx.guild.id, user.id, cargo_name)
        )
        
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="üëë Primeira Dama Definida!",
            description=f"{user.mention} agora √© a **{cargo_name}** do servidor!",
            color=0x9b59b6
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao definir PD: {e}")
        await ctx.send("‚ùå Erro ao definir primeira dama!")

# ================= INFORMATIVO =================
@bot.command(name='ajuda', aliases=['help'])
async def ajuda(ctx):
    """Mostra todos os comandos"""
    embed = discord.Embed(
        title="ü§ñ Comandos do Bot",
        description="Aqui est√£o todos os comandos dispon√≠veis:",
        color=0x3498db
    )
    
    # Apar√™ncia
    embed.add_field(
        name="üé≠ Apar√™ncia",
        value="`andar`, `setavatar`, `setbanner`, `setusername`",
        inline=False
    )
    
    # Economia
    embed.add_field(
        name="üí∏ Economia",
        value="`carteira`, `daily`, `depositar`, `empregos`, `trabalhar`",
        inline=False
    )
    
    # Primeira Dama
    embed.add_field(
        name="üíç Primeira Dama",
        value="`pd`",
        inline=False
    )
    
    # Informativo
    embed.add_field(
        name="‚ùó Informativo",
        value="`ajuda`, `botinfo`, `ping`",
        inline=False
    )
    
    # Modera√ß√£o
    embed.add_field(
        name="üëÆ Modera√ß√£o",
        value="`warn`, `ban`, `kick`, `mute`, `unmute`, `lock`, `unlock`, `castigar`, `nuke`, `bangif`, `mutecall`, `unmutecall`, `removeadvertence`, `removecastigo`, `removerole`, `unban`, `unbanall`, `advertence`",
        inline=False
    )
    
    # Social
    embed.add_field(
        name="üéØ Social",
        value="`avatar`, `perfil`, `rep`, `sobremim`, `influencer`, `tellonym`",
        inline=False
    )
    
    # Staff
    embed.add_field(
        name="üß© Staff",
        value="`migracoes`, `migrar`, `movchat`, `mov`, `movpoints`, `recrutamentos`, `recrutar`, `register`, `registers`, `tempo`, `verificar`, `resetmigs`, `resetmovs`, `resetrecs`, `resetregisters`, `resettime`, `resetverificacoes`",
        inline=False
    )
    
    # Utilit√°rios
    embed.add_field(
        name="üî± Utilit√°rios",
        value="`cl`, `clear`, `membersrole`",
        inline=False
    )
    
    # VIP
    embed.add_field(
        name="‚≠ê VIP",
        value="`familia`, `f`, `addfamily`, `removefamily`, `addvip`, `addvipc`, `removevip`, `removevipc`, `setvip`",
        inline=False
    )
    
    # Integra√ß√µes
    embed.add_field(
        name="üîó Integra√ß√µes",
        value="`instagram`, `insta`, `ig`, `tellonym`",
        inline=False
    )
    
    embed.set_footer(text="Use ! antes de cada comando ‚Ä¢ Total: 62+ comandos")
    await ctx.send(embed=embed)

@bot.command(name='botinfo')
async def botinfo(ctx):
    """Informa√ß√µes do bot"""
    embed = discord.Embed(
        title="ü§ñ Informa√ß√µes do Bot",
        color=0x3498db
    )
    embed.add_field(name="üìä Servidores", value=len(bot.guilds), inline=True)
    embed.add_field(name="üë• Usu√°rios", value=len(bot.users), inline=True)
    embed.add_field(name="üèì Lat√™ncia", value=f"{bot.latency * 1000:.0f}ms", inline=True)
    embed.add_field(name="üêç Python", value="3.11", inline=True)
    embed.add_field(name="üìö Discord.py", value=discord.__version__, inline=True)
    embed.set_footer(text="Hospedado na SquareCloud")
    
    await ctx.send(embed=embed)

@bot.command(name='ping')
async def ping(ctx):
    """Mostra a lat√™ncia do bot"""
    latency = bot.latency * 1000
    embed = discord.Embed(
        title="üèì Pong!",
        description=f"Lat√™ncia: **{latency:.0f}ms**",
        color=0x00ff00 if latency < 100 else 0xffff00 if latency < 200 else 0xff0000
    )
    await ctx.send(embed=embed)

# ================= SOCIAL =================
@bot.command(name='avatar', aliases=['av'])
async def avatar(ctx, user: discord.Member = None):
    """Mostra o avatar de um usu√°rio"""
    if user is None:
        user = ctx.author
    
    embed = discord.Embed(
        title=f"üñºÔ∏è Avatar de {user.display_name}",
        color=0x3498db
    )
    embed.set_image(url=user.display_avatar.url)
    
    await ctx.send(embed=embed)

@bot.command(name='perfil', aliases=['profile'])
async def perfil(ctx, user: discord.Member = None):
    """Mostra o perfil de um usu√°rio"""
    if user is None:
        user = ctx.author
    
    ensure_user_exists(user.id)
    
    try:
        conn = get_db()
        user_data = conn.execute(
            "SELECT money, bank, rep, level, about_me FROM users WHERE user_id = ?", (user.id,)
        ).fetchone()
        conn.close()
        
        if not user_data:
            money = bank = rep = 0
            level = 1
            about_me = "Nenhuma descri√ß√£o definida."
        else:
            money, bank, rep, level, about_me = user_data
            if not about_me:
                about_me = "Nenhuma descri√ß√£o definida."
        
        total = money + bank
        
        embed = discord.Embed(
            title=f"üë§ Perfil de {user.display_name}",
            description=about_me,
            color=0x3498db
        )
        embed.add_field(name="üí∞ Dinheiro Total", value=f"${total:,}", inline=True)
        embed.add_field(name="‚≠ê Reputa√ß√£o", value=f"{rep}", inline=True)
        embed.add_field(name="üèÜ N√≠vel", value=f"{level}", inline=True)
        embed.set_thumbnail(url=user.display_avatar.url)
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro no perfil: {e}")
        await ctx.send("‚ùå Erro ao buscar perfil!")

@bot.command(name='rep', aliases=['reputacao'])
@cooldown(1, 86400, BucketType.user)  # 24 horas
async def rep(ctx, user: discord.Member):
    """D√° reputa√ß√£o para um usu√°rio"""
    if user.id == ctx.author.id:
        await ctx.send("‚ùå Voc√™ n√£o pode dar reputa√ß√£o para si mesmo!")
        return
    
    ensure_user_exists(user.id)
    
    try:
        conn = get_db()
        conn.execute(
            "UPDATE users SET rep = rep + 1, last_rep = ? WHERE user_id = ?",
            (datetime.now().isoformat(), user.id)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚≠ê Reputa√ß√£o Dada!",
            description=f"{ctx.author.mention} deu reputa√ß√£o para {user.mention}!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro na reputa√ß√£o: {e}")
        await ctx.send("‚ùå Erro ao dar reputa√ß√£o!")

@bot.command(name='sobremim', aliases=['aboutme'])
async def sobremim(ctx, *, texto: str):
    """Define sua descri√ß√£o pessoal"""
    if len(texto) > 200:
        await ctx.send("‚ùå A descri√ß√£o deve ter no m√°ximo 200 caracteres!")
        return
    
    user_id = ctx.author.id
    ensure_user_exists(user_id)
    
    try:
        conn = get_db()
        conn.execute(
            "UPDATE users SET about_me = ? WHERE user_id = ?",
            (texto, user_id)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Descri√ß√£o Atualizada!",
            description=f"Sua nova descri√ß√£o: {texto}",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao atualizar descri√ß√£o: {e}")
        await ctx.send("‚ùå Erro ao atualizar descri√ß√£o!")

# ================= BASIC MODERATION =================
@bot.command(name='warn', aliases=['advertir'])
@commands.check(check_mod)
async def warn(ctx, user: discord.Member, *, reason: str):
    """Adverte um usu√°rio"""
    try:
        conn = get_db()
        conn.execute(
            "INSERT INTO warns (user_id, moderator_id, reason, server_id) VALUES (?, ?, ?, ?)",
            (user.id, ctx.author.id, reason, ctx.guild.id)
        )
        conn.commit()
        
        # Count total warns
        warn_count = conn.execute(
            "SELECT COUNT(*) FROM warns WHERE user_id = ? AND server_id = ? AND active = 1",
            (user.id, ctx.guild.id)
        ).fetchone()[0]
        
        conn.close()
        
        embed = discord.Embed(
            title="‚ö†Ô∏è Usu√°rio Advertido",
            description=f"{user.mention} foi advertido!\n**Motivo:** {reason}\n**Total de warns:** {warn_count}",
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao advertir: {e}")
        await ctx.send("‚ùå Erro ao advertir usu√°rio!")

@bot.command(name='kick', aliases=['expulsar'])
@commands.check(check_mod)
async def kick(ctx, user: discord.Member, *, reason: str = "N√£o especificado"):
    """Expulsa um usu√°rio"""
    try:
        await user.kick(reason=reason)
        
        embed = discord.Embed(
            title="üë¢ Usu√°rio Expulso",
            description=f"{user.mention} foi expulso!\n**Motivo:** {reason}",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao expulsar: {e}")
        await ctx.send("‚ùå Erro ao expulsar usu√°rio!")

@bot.command(name='ban', aliases=['banir'])
@commands.check(check_mod)
async def ban(ctx, user: discord.Member, *, reason: str = "N√£o especificado"):
    """Bane um usu√°rio"""
    try:
        await user.ban(reason=reason)
        
        embed = discord.Embed(
            title="üî® Usu√°rio Banido",
            description=f"{user.mention} foi banido!\n**Motivo:** {reason}",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao banir: {e}")
        await ctx.send("‚ùå Erro ao banir usu√°rio!")

# ================= UTILITIES =================
@bot.command(name='clear', aliases=['cl'])
@commands.check(check_mod)
async def clear(ctx, amount: int = 10):
    """Limpa mensagens do canal"""
    if amount > 100:
        amount = 100
    
    try:
        deleted = await ctx.channel.purge(limit=amount + 1)  # +1 for the command message
        
        embed = discord.Embed(
            title="üßπ Canal Limpo",
            description=f"Foram deletadas **{len(deleted) - 1}** mensagens!",
            color=0x00ff00
        )
        msg = await ctx.send(embed=embed)
        await asyncio.sleep(3)
        await msg.delete()
        
    except Exception as e:
        print(f"Erro ao limpar: {e}")
        await ctx.send("‚ùå Erro ao limpar mensagens!")

# ================= MODERATION COMMANDS =================
@bot.command(name='advertence', aliases=['adv'])
@commands.check(check_mod)
async def advertence(ctx, user: discord.Member, *, reason: str):
    """Adverte um usu√°rio (alias para warn)"""
    await warn(ctx, user, reason=reason)

@bot.command(name='bangif')
@commands.check(check_mod)
async def bangif(ctx, *, gif_query: str = "ban"):
    """Bane com gif animado"""
    gifs = [
        "https://media.giphy.com/media/fe4dDMD2cAU5RfEaCU/giphy.gif",
        "https://media.giphy.com/media/H99r2HtnYs492/giphy.gif",
        "https://media.giphy.com/media/qCj1NK1rxtnna/giphy.gif"
    ]
    
    embed = discord.Embed(
        title="üî® Ban Hammer!",
        description=f"**{gif_query}** foi banido com estilo!",
        color=0xff0000
    )
    embed.set_image(url=random.choice(gifs))
    await ctx.send(embed=embed)

@bot.command(name='castigar')
@commands.check(check_mod)
async def castigar(ctx, user: discord.Member, duration: str, *, reason: str = "Comportamento inadequado"):
    """Castiga um usu√°rio temporariamente"""
    try:
        # Parse duration (simple implementation)
        if 'm' in duration:
            minutes = int(duration.replace('m', ''))
            timeout_until = datetime.now() + timedelta(minutes=minutes)
        elif 'h' in duration:
            hours = int(duration.replace('h', ''))
            timeout_until = datetime.now() + timedelta(hours=hours)
        else:
            await ctx.send("‚ùå Formato de tempo inv√°lido! Use: 5m, 2h, etc.")
            return
        
        await user.timeout(timeout_until, reason=reason)
        
        embed = discord.Embed(
            title="üîá Usu√°rio Castigado",
            description=f"{user.mention} foi castigado por {duration}!\n**Motivo:** {reason}",
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao castigar: {e}")
        await ctx.send("‚ùå Erro ao castigar usu√°rio!")

@bot.command(name='lock')
@commands.check(check_mod)
async def lock(ctx, channel: discord.TextChannel = None):
    """Bloqueia um canal"""
    if channel is None:
        channel = ctx.channel
    
    try:
        await channel.set_permissions(ctx.guild.default_role, send_messages=False)
        
        embed = discord.Embed(
            title="üîí Canal Bloqueado",
            description=f"Canal {channel.mention} foi bloqueado!",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao bloquear canal: {e}")
        await ctx.send("‚ùå Erro ao bloquear canal!")

@bot.command(name='unlock')
@commands.check(check_mod)
async def unlock(ctx, channel: discord.TextChannel = None):
    """Desbloqueia um canal"""
    if channel is None:
        channel = ctx.channel
    
    try:
        await channel.set_permissions(ctx.guild.default_role, send_messages=True)
        
        embed = discord.Embed(
            title="üîì Canal Desbloqueado",
            description=f"Canal {channel.mention} foi desbloqueado!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao desbloquear canal: {e}")
        await ctx.send("‚ùå Erro ao desbloquear canal!")

@bot.command(name='mutecall', aliases=['vmute'])
@commands.check(check_mod)
async def mutecall(ctx, user: discord.Member):
    """Muta usu√°rio no voice chat"""
    if user.voice:
        try:
            await user.edit(mute=True)
            
            embed = discord.Embed(
                title="üîá Usu√°rio Mutado no Voice",
                description=f"{user.mention} foi mutado no chat de voz!",
                color=0xff9900
            )
            await ctx.send(embed=embed)
            
        except Exception as e:
            print(f"Erro ao mutar no voice: {e}")
            await ctx.send("‚ùå Erro ao mutar usu√°rio no voice!")
    else:
        await ctx.send("‚ùå Usu√°rio n√£o est√° em um canal de voz!")

@bot.command(name='unmutecall', aliases=['vunmute'])
@commands.check(check_mod)
async def unmutecall(ctx, user: discord.Member):
    """Desmuta usu√°rio no voice chat"""
    if user.voice:
        try:
            await user.edit(mute=False)
            
            embed = discord.Embed(
                title="üîä Usu√°rio Desmutado no Voice",
                description=f"{user.mention} foi desmutado no chat de voz!",
                color=0x00ff00
            )
            await ctx.send(embed=embed)
            
        except Exception as e:
            print(f"Erro ao desmutar no voice: {e}")
            await ctx.send("‚ùå Erro ao desmutar usu√°rio no voice!")
    else:
        await ctx.send("‚ùå Usu√°rio n√£o est√° em um canal de voz!")

@bot.command(name='mute')
@commands.check(check_mod)
async def mute(ctx, user: discord.Member, duration: str = "indefinido", *, reason: str = "N√£o especificado"):
    """Muta um usu√°rio no servidor"""
    try:
        # Try to timeout the user
        if duration != "indefinido":
            if 'm' in duration:
                minutes = int(duration.replace('m', ''))
                timeout_until = datetime.now() + timedelta(minutes=minutes)
            elif 'h' in duration:
                hours = int(duration.replace('h', ''))
                timeout_until = datetime.now() + timedelta(hours=hours)
            else:
                await ctx.send("‚ùå Formato de tempo inv√°lido! Use: 5m, 2h, etc.")
                return
            
            await user.timeout(timeout_until, reason=reason)
        
        embed = discord.Embed(
            title="üîá Usu√°rio Mutado",
            description=f"{user.mention} foi mutado por {duration}!\n**Motivo:** {reason}",
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao mutar: {e}")
        await ctx.send("‚ùå Erro ao mutar usu√°rio!")

@bot.command(name='unmute')
@commands.check(check_mod)
async def unmute(ctx, user: discord.Member):
    """Desmuta um usu√°rio"""
    try:
        await user.timeout(None)
        
        embed = discord.Embed(
            title="üîä Usu√°rio Desmutado",
            description=f"{user.mention} foi desmutado!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao desmutar: {e}")
        await ctx.send("‚ùå Erro ao desmutar usu√°rio!")

@bot.command(name='nuke')
@commands.check(check_mod)
async def nuke(ctx):
    """Deleta e recria o canal (limpa tudo)"""
    try:
        channel_name = ctx.channel.name
        channel_position = ctx.channel.position
        channel_category = ctx.channel.category
        
        await ctx.channel.delete()
        
        new_channel = await ctx.guild.create_text_channel(
            name=channel_name,
            category=channel_category,
            position=channel_position
        )
        
        embed = discord.Embed(
            title="üí• Canal Nukado!",
            description="Canal foi completamente limpo e recriado!",
            color=0xff0000
        )
        await new_channel.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao nukar canal: {e}")
        await ctx.send("‚ùå Erro ao nukar canal!")

@bot.command(name='removeadvertence', aliases=['removewarn'])
@commands.check(check_mod)
async def remove_advertence(ctx, user: discord.Member, warn_id: int = None):
    """Remove uma advert√™ncia espec√≠fica"""
    try:
        conn = get_db()
        
        if warn_id:
            # Remove specific warn
            conn.execute(
                "UPDATE warns SET active = 0 WHERE warn_id = ? AND server_id = ?",
                (warn_id, ctx.guild.id)
            )
            message = f"Advert√™ncia #{warn_id} removida"
        else:
            # Remove latest warn
            conn.execute(
                "UPDATE warns SET active = 0 WHERE user_id = ? AND server_id = ? AND active = 1 ORDER BY timestamp DESC LIMIT 1",
                (user.id, ctx.guild.id)
            )
            message = "√öltima advert√™ncia removida"
        
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Advert√™ncia Removida",
            description=f"{message} de {user.mention}!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao remover advert√™ncia: {e}")
        await ctx.send("‚ùå Erro ao remover advert√™ncia!")

@bot.command(name='removecastigo')
@commands.check(check_mod)
async def remove_castigo(ctx, user: discord.Member):
    """Remove castigo/timeout de um usu√°rio"""
    try:
        await user.timeout(None)
        
        embed = discord.Embed(
            title="‚úÖ Castigo Removido",
            description=f"Castigo removido de {user.mention}!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao remover castigo: {e}")
        await ctx.send("‚ùå Erro ao remover castigo!")

@bot.command(name='addrole')
@commands.check(check_mod)
async def add_role(ctx, user: discord.Member, *, role_name: str):
    """Adiciona cargo a um usu√°rio"""
    try:
        role = discord.utils.get(ctx.guild.roles, name=role_name)
        if not role:
            await ctx.send("‚ùå Cargo n√£o encontrado!")
            return
        
        await user.add_roles(role)
        
        embed = discord.Embed(
            title="‚úÖ Cargo Adicionado",
            description=f"Cargo **{role.name}** adicionado a {user.mention}!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao adicionar cargo: {e}")
        await ctx.send("‚ùå Erro ao adicionar cargo!")

@bot.command(name='removerole')
@commands.check(check_mod)
async def remove_role(ctx, user: discord.Member, *, role_name: str):
    """Remove cargo de um usu√°rio"""
    try:
        role = discord.utils.get(ctx.guild.roles, name=role_name)
        if not role:
            await ctx.send("‚ùå Cargo n√£o encontrado!")
            return
        
        await user.remove_roles(role)
        
        embed = discord.Embed(
            title="‚úÖ Cargo Removido",
            description=f"Cargo **{role.name}** removido de {user.mention}!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao remover cargo: {e}")
        await ctx.send("‚ùå Erro ao remover cargo!")

@bot.command(name='unban')
@commands.check(check_mod)
async def unban(ctx, user_id: int):
    """Desbane um usu√°rio pelo ID"""
    try:
        user = await bot.fetch_user(user_id)
        await ctx.guild.unban(user)
        
        embed = discord.Embed(
            title="‚úÖ Usu√°rio Desbanido",
            description=f"**{user.name}** foi desbanido!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao desbanir: {e}")
        await ctx.send("‚ùå Erro ao desbanir usu√°rio!")

@bot.command(name='unbanall')
@commands.check(check_admin)
async def unban_all(ctx):
    """Desbane todos os usu√°rios (ADMIN ONLY)"""
    try:
        banned_users = [entry async for entry in ctx.guild.bans()]
        count = 0
        
        for ban_entry in banned_users:
            try:
                await ctx.guild.unban(ban_entry.user)
                count += 1
            except:
                pass
        
        embed = discord.Embed(
            title="‚úÖ Usu√°rios Desbanidos",
            description=f"**{count}** usu√°rios foram desbanidos!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao desbanir todos: {e}")
        await ctx.send("‚ùå Erro ao desbanir usu√°rios!")

# ================= STAFF COMMANDS =================
@bot.command(name='migracoes', aliases=['migs'])
async def migracoes(ctx, user: discord.Member = None):
    """Mostra estat√≠sticas de migra√ß√µes de staff"""
    if user is None:
        user = ctx.author
    
    try:
        conn = get_db()
        staff_data = conn.execute(
            "SELECT points FROM staff WHERE user_id = ? AND server_id = ?", 
            (user.id, ctx.guild.id)
        ).fetchone()
        conn.close()
        
        migs = staff_data[0] if staff_data else 0
        
        embed = discord.Embed(
            title="üìä Migra√ß√µes de Staff",
            description=f"{user.mention} possui **{migs}** migra√ß√µes!",
            color=0x3498db
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao buscar migra√ß√µes: {e}")
        await ctx.send("‚ùå Erro ao buscar migra√ß√µes!")

@bot.command(name='migrar')
@commands.check(check_mod)
async def migrar(ctx, user: discord.Member, points: int = 1):
    """Adiciona pontos de migra√ß√£o para staff"""
    try:
        conn = get_db()
        conn.execute(
            "INSERT OR REPLACE INTO staff (user_id, server_id, role, points) VALUES (?, ?, 'staff', COALESCE((SELECT points FROM staff WHERE user_id = ? AND server_id = ?), 0) + ?)",
            (user.id, ctx.guild.id, user.id, ctx.guild.id, points)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Migra√ß√£o Registrada",
            description=f"+{points} pontos de migra√ß√£o para {user.mention}!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao migrar: {e}")
        await ctx.send("‚ùå Erro ao registrar migra√ß√£o!")

@bot.command(name='movchat', aliases=['mov'])
@commands.check(check_mod)
async def mov_chat(ctx, user: discord.Member, points: int = 1):
    """Adiciona pontos de movimenta√ß√£o de chat"""
    await migrar(ctx, user, points)  # Same system as migrar

@bot.command(name='movpoints')
async def mov_points(ctx, user: discord.Member = None):
    """Mostra pontos de movimenta√ß√£o"""
    await migracoes(ctx, user)  # Same system as migracoes

@bot.command(name='recrutamentos', aliases=['recs'])
async def recrutamentos(ctx, user: discord.Member = None):
    """Mostra estat√≠sticas de recrutamentos"""
    await migracoes(ctx, user)  # Same system

@bot.command(name='recrutar')
@commands.check(check_mod)
async def recrutar(ctx, user: discord.Member, points: int = 1):
    """Adiciona pontos de recrutamento"""
    await migrar(ctx, user, points)  # Same system

@bot.command(name='register')
@commands.check(check_mod)
async def register_staff(ctx, user: discord.Member, *, role: str = "staff"):
    """Registra um membro como staff"""
    try:
        conn = get_db()
        conn.execute(
            "INSERT OR REPLACE INTO staff (user_id, server_id, role, points) VALUES (?, ?, ?, 0)",
            (user.id, ctx.guild.id, role)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Staff Registrado",
            description=f"{user.mention} foi registrado como **{role}**!",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao registrar staff: {e}")
        await ctx.send("‚ùå Erro ao registrar staff!")

@bot.command(name='registers')
async def registers(ctx):
    """Lista todos os staff registrados"""
    try:
        conn = get_db()
        staff_list = conn.execute(
            "SELECT user_id, role, points FROM staff WHERE server_id = ? ORDER BY points DESC",
            (ctx.guild.id,)
        ).fetchall()
        conn.close()
        
        if not staff_list:
            await ctx.send("‚ùå Nenhum staff registrado!")
            return
        
        embed = discord.Embed(
            title="üë• Staff Registrados",
            color=0x3498db
        )
        
        for user_id, role, points in staff_list[:10]:  # Top 10
            try:
                user = bot.get_user(user_id)
                name = user.name if user else f"ID: {user_id}"
                embed.add_field(
                    name=f"üèÜ {name}",
                    value=f"Cargo: {role}\nPontos: {points}",
                    inline=True
                )
            except:
                pass
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao listar staff: {e}")
        await ctx.send("‚ùå Erro ao listar staff!")

# Reset commands for staff
@bot.command(name='resetmigs')
@commands.check(check_admin)
async def reset_migs(ctx, user: discord.Member = None):
    """Reseta migra√ß√µes de um usu√°rio ou todas"""
    try:
        conn = get_db()
        if user:
            conn.execute(
                "UPDATE staff SET points = 0 WHERE user_id = ? AND server_id = ?",
                (user.id, ctx.guild.id)
            )
            message = f"Migra√ß√µes de {user.mention} resetadas!"
        else:
            conn.execute(
                "UPDATE staff SET points = 0 WHERE server_id = ?",
                (ctx.guild.id,)
            )
            message = "Todas as migra√ß√µes foram resetadas!"
        
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="üîÑ Reset Realizado",
            description=message,
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao resetar: {e}")
        await ctx.send("‚ùå Erro ao resetar migra√ß√µes!")

# Add aliases for other reset commands
@bot.command(name='resetmovchat')
@commands.check(check_admin)
async def reset_movchat(ctx, user: discord.Member = None):
    """Reseta movimenta√ß√µes de chat"""
    await reset_migs(ctx, user)

@bot.command(name='resetmovs')
@commands.check(check_admin) 
async def reset_movs(ctx, user: discord.Member = None):
    """Reseta movimenta√ß√µes"""
    await reset_migs(ctx, user)

@bot.command(name='resetrecs')
@commands.check(check_admin)
async def reset_recs(ctx, user: discord.Member = None):
    """Reseta recrutamentos"""
    await reset_migs(ctx, user)

@bot.command(name='resetregisters')
@commands.check(check_admin)
async def reset_registers(ctx):
    """Reseta todos os registros de staff"""
    try:
        conn = get_db()
        conn.execute("DELETE FROM staff WHERE server_id = ?", (ctx.guild.id,))
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="üîÑ Registros Resetados",
            description="Todos os registros de staff foram limpos!",
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao resetar registros: {e}")
        await ctx.send("‚ùå Erro ao resetar registros!")

@bot.command(name='resettime')
@commands.check(check_admin)
async def reset_time(ctx):
    """Reseta todos os cooldowns de tempo"""
    try:
        conn = get_db()
        conn.execute(
            "UPDATE users SET last_daily = NULL, last_work = NULL, last_rep = NULL"
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="üîÑ Tempos Resetados",
            description="Todos os cooldowns foram resetados!",
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao resetar tempos: {e}")
        await ctx.send("‚ùå Erro ao resetar tempos!")

@bot.command(name='resetverificacoes')
@commands.check(check_admin)
async def reset_verificacoes(ctx):
    """Reseta verifica√ß√µes (placeholder)"""
    embed = discord.Embed(
        title="üîÑ Verifica√ß√µes Resetadas",
        description="Sistema de verifica√ß√µes foi resetado!",
        color=0xff9900
    )
    await ctx.send(embed=embed)

@bot.command(name='tempo')
async def tempo(ctx, user: discord.Member = None):
    """Mostra tempo de atividade de um usu√°rio"""
    if user is None:
        user = ctx.author
    
    embed = discord.Embed(
        title="‚è±Ô∏è Tempo de Atividade",
        description=f"Tempo de {user.mention} no servidor: **Calculando...**",
        color=0x3498db
    )
    embed.add_field(name="üìÖ Entrou no servidor", value=user.joined_at.strftime("%d/%m/%Y") if user.joined_at else "N/A", inline=True)
    embed.add_field(name="üìÖ Conta criada", value=user.created_at.strftime("%d/%m/%Y"), inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='verificar')
@commands.check(check_mod)
async def verificar(ctx, user: discord.Member):
    """Verifica um usu√°rio (adiciona cargo de verificado se existir)"""
    try:
        # Try to find a "Verificado" or similar role
        verified_role = discord.utils.get(ctx.guild.roles, name="Verificado")
        if not verified_role:
            verified_role = discord.utils.get(ctx.guild.roles, name="Verified")
        if not verified_role:
            verified_role = discord.utils.get(ctx.guild.roles, name="Membro")
        
        if verified_role:
            await user.add_roles(verified_role)
            message = f"Cargo **{verified_role.name}** adicionado!"
        else:
            message = "Nenhum cargo de verifica√ß√£o encontrado!"
        
        embed = discord.Embed(
            title="‚úÖ Usu√°rio Verificado",
            description=f"{user.mention} foi verificado!\n{message}",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao verificar: {e}")
        await ctx.send("‚ùå Erro ao verificar usu√°rio!")

# ================= UTILITIES COMMANDS =================
@bot.command(name='membersrole')
async def members_role(ctx, *, role_name: str):
    """Lista membros com um cargo espec√≠fico"""
    try:
        role = discord.utils.get(ctx.guild.roles, name=role_name)
        if not role:
            await ctx.send("‚ùå Cargo n√£o encontrado!")
            return
        
        members = [member for member in ctx.guild.members if role in member.roles]
        
        if not members:
            await ctx.send(f"‚ùå Nenhum membro possui o cargo **{role.name}**!")
            return
        
        embed = discord.Embed(
            title=f"üë• Membros com o cargo {role.name}",
            description=f"Total: **{len(members)}** membros",
            color=role.color
        )
        
        # Show first 20 members
        member_list = []
        for i, member in enumerate(members[:20], 1):
            member_list.append(f"{i}. {member.mention}")
        
        embed.add_field(
            name="Membros:",
            value="\n".join(member_list) if member_list else "Nenhum",
            inline=False
        )
        
        if len(members) > 20:
            embed.set_footer(text=f"Mostrando 20 de {len(members)} membros")
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao listar membros: {e}")
        await ctx.send("‚ùå Erro ao listar membros!")

# ================= VIP COMMANDS =================
@bot.command(name='addfamily')
@commands.check(check_admin)
async def add_family_vip(ctx, user: discord.Member, *, family_name: str):
    """Adiciona fam√≠lia VIP para um usu√°rio"""
    try:
        conn = get_db()
        
        # Create or get family
        family = conn.execute(
            "SELECT family_id FROM families WHERE name = ?", (family_name,)
        ).fetchone()
        
        if not family:
            cursor = conn.execute(
                "INSERT INTO families (name, leader_id, created_at) VALUES (?, ?, ?)",
                (family_name, user.id, datetime.now().isoformat())
            )
            family_id = cursor.lastrowid
        else:
            family_id = family[0]
        
        # Add user to family and mark as VIP
        conn.execute(
            "INSERT OR REPLACE INTO users (user_id, family_id, vip, vip_level) VALUES (?, ?, 1, 1)",
            (user.id, family_id)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Fam√≠lia VIP Adicionada",
            description=f"{user.mention} foi adicionado √† fam√≠lia VIP **{family_name}**!",
            color=0x9b59b6
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao adicionar fam√≠lia VIP: {e}")
        await ctx.send("‚ùå Erro ao adicionar fam√≠lia VIP!")

@bot.command(name='removefamily')
@commands.check(check_admin)
async def remove_family_vip(ctx, user: discord.Member):
    """Remove fam√≠lia VIP de um usu√°rio"""
    try:
        conn = get_db()
        conn.execute(
            "UPDATE users SET family_id = NULL, vip = 0, vip_level = 0 WHERE user_id = ?",
            (user.id,)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Fam√≠lia VIP Removida",
            description=f"Fam√≠lia VIP removida de {user.mention}!",
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao remover fam√≠lia VIP: {e}")
        await ctx.send("‚ùå Erro ao remover fam√≠lia VIP!")

@bot.command(name='addvipc')
@commands.check(check_admin)
async def add_vipc(ctx, user: discord.Member):
    """Adiciona VIP Comum"""
    try:
        conn = get_db()
        conn.execute(
            "INSERT OR REPLACE INTO users (user_id, vip, vip_level) VALUES (?, 1, 1)",
            (user.id,)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ VIP Comum Adicionado",
            description=f"{user.mention} agora √© VIP Comum!",
            color=0x9b59b6
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao adicionar VIP: {e}")
        await ctx.send("‚ùå Erro ao adicionar VIP!")

@bot.command(name='addvip')
@commands.check(check_admin)
async def add_vip(ctx, user: discord.Member, level: int = 2):
    """Adiciona VIP Premium"""
    try:
        conn = get_db()
        conn.execute(
            "INSERT OR REPLACE INTO users (user_id, vip, vip_level) VALUES (?, 1, ?)",
            (user.id, level)
        )
        conn.commit()
        conn.close()
        
        vip_types = {1: "Comum", 2: "Premium", 3: "Ultimate"}
        vip_name = vip_types.get(level, "Premium")
        
        embed = discord.Embed(
            title="‚úÖ VIP Adicionado",
            description=f"{user.mention} agora √© VIP {vip_name}!",
            color=0x9b59b6
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao adicionar VIP: {e}")
        await ctx.send("‚ùå Erro ao adicionar VIP!")

@bot.command(name='removevipc')
@commands.check(check_admin)
async def remove_vipc(ctx, user: discord.Member):
    """Remove VIP Comum"""
    await remove_vip(ctx, user)

@bot.command(name='removevip')
@commands.check(check_admin)
async def remove_vip(ctx, user: discord.Member):
    """Remove VIP"""
    try:
        conn = get_db()
        conn.execute(
            "UPDATE users SET vip = 0, vip_level = 0 WHERE user_id = ?",
            (user.id,)
        )
        conn.commit()
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ VIP Removido",
            description=f"VIP removido de {user.mention}!",
            color=0xff9900
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao remover VIP: {e}")
        await ctx.send("‚ùå Erro ao remover VIP!")

@bot.command(name='setvip')
@commands.check(check_admin)
async def set_vip(ctx, user: discord.Member, level: int):
    """Define n√≠vel VIP espec√≠fico"""
    await add_vip(ctx, user, level)

# ================= SOCIAL ENHANCEMENTS =================
@bot.command(name='influencer')
async def influencer(ctx, user: discord.Member = None):
    """Mostra ranking de influ√™ncia"""
    if user is None:
        user = ctx.author
    
    ensure_user_exists(user.id)
    
    try:
        conn = get_db()
        user_data = conn.execute(
            "SELECT rep, level FROM users WHERE user_id = ?", (user.id,)
        ).fetchone()
        conn.close()
        
        rep = user_data[0] if user_data else 0
        level = user_data[1] if user_data else 1
        
        influence_score = rep * 2 + level * 10
        
        # Determine influence level
        if influence_score >= 1000:
            rank = "üî• Mega Influencer"
        elif influence_score >= 500:
            rank = "‚≠ê Super Influencer"
        elif influence_score >= 200:
            rank = "üåü Influencer"
        elif influence_score >= 50:
            rank = "üìà Crescendo"
        else:
            rank = "üë∂ Iniciante"
        
        embed = discord.Embed(
            title=f"üéØ Status de Influ√™ncia",
            color=0xe91e63
        )
        embed.add_field(name="üë§ Usu√°rio", value=user.mention, inline=True)
        embed.add_field(name="üìä Pontua√ß√£o", value=f"{influence_score}", inline=True)
        embed.add_field(name="üèÜ Ranking", value=rank, inline=True)
        embed.add_field(name="‚≠ê Reputa√ß√£o", value=f"{rep}", inline=True)
        embed.add_field(name="üéØ N√≠vel", value=f"{level}", inline=True)
        embed.set_thumbnail(url=user.display_avatar.url)
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        print(f"Erro no influencer: {e}")
        await ctx.send("‚ùå Erro ao calcular influ√™ncia!")

@bot.command(name='tellonym')
async def tellonym(ctx, user: discord.Member = None):
    """Sistema de mensagens an√¥nimas (como Tellonym)"""
    if user is None:
        embed = discord.Embed(
            title="üíå Tellonym - Mensagens An√¥nimas",
            description="Use `!tellonym @usu√°rio` para enviar uma mensagem an√¥nima!",
            color=0xff6b6b
        )
        embed.add_field(
            name="üìù Como usar:",
            value="1. `!tellonym @usu√°rio` - Abre formul√°rio\n2. Escreva sua mensagem\n3. Mensagem √© enviada anonimamente",
            inline=False
        )
        embed.add_field(
            name="‚ö†Ô∏è Regras:",
            value="‚Ä¢ N√£o envie spam\n‚Ä¢ Seja respeitoso\n‚Ä¢ Mensagens ofensivas ser√£o punidas",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    if user.id == ctx.author.id:
        await ctx.send("‚ùå Voc√™ n√£o pode enviar mensagem an√¥nima para si mesmo!")
        return
    
    modal = TellonymModal(user)
    
    # Since we can't directly send modal from command, we create a button
    class TellonymView(View):
        def __init__(self, target_user):
            super().__init__(timeout=300)
            self.target_user = target_user
            
        @discord.ui.button(label="üìù Enviar Mensagem An√¥nima", style=discord.ButtonStyle.primary, emoji="üíå")
        async def send_anonymous(self, interaction: discord.Interaction, button: Button):
            modal = TellonymModal(self.target_user)
            await interaction.response.send_modal(modal)
    
    embed = discord.Embed(
        title="üíå Tellonym",
        description=f"Envie uma mensagem an√¥nima para {user.mention}!",
        color=0xff6b6b
    )
    
    view = TellonymView(user)
    await ctx.send(embed=embed, view=view)

class TellonymModal(Modal):
    def __init__(self, target_user):
        super().__init__(title=f"Mensagem para {target_user.display_name}")
        self.target_user = target_user
        
        self.message_input = TextInput(
            label="Sua mensagem an√¥nima:",
            placeholder="Digite sua mensagem aqui...",
            style=discord.TextStyle.paragraph,
            max_length=500,
            required=True
        )
        self.add_item(self.message_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        message = self.message_input.value
        
        try:
            # Send anonymous message to target user
            embed = discord.Embed(
                title="üíå Voc√™ recebeu uma mensagem an√¥nima!",
                description=message,
                color=0xff6b6b
            )
            embed.set_footer(text="Esta mensagem foi enviada anonimamente")
            
            try:
                await self.target_user.send(embed=embed)
                await interaction.response.send_message("‚úÖ Mensagem an√¥nima enviada!", ephemeral=True)
            except discord.Forbidden:
                # If can't DM, send in channel
                await interaction.response.send_message(
                    f"{self.target_user.mention}, voc√™ recebeu uma mensagem an√¥nima:",
                    embed=embed
                )
                
        except Exception as e:
            print(f"Erro no tellonym: {e}")
            await interaction.response.send_message("‚ùå Erro ao enviar mensagem!", ephemeral=True)

# ================= INSTAGRAM INTEGRATION (Basic) =================
@bot.command(name='instagram', aliases=['insta', 'ig'])
async def instagram(ctx, *, username: str = None):
    """Sistema de Instagram (placeholder para integra√ß√£o futura)"""
    if not username:
        embed = discord.Embed(
            title="üì∏ Instagram Integration",
            description="Sistema de integra√ß√£o com Instagram!",
            color=0xe4405f
        )
        embed.add_field(
            name="üì± Como usar:",
            value="`!instagram @username` - Ver perfil\n`!instagram stories` - Ver stories (VIP)",
            inline=False
        )
        embed.add_field(
            name="üîß Status:",
            value="Sistema em desenvolvimento!\nEm breve voc√™ poder√° ver posts e stories diretamente no Discord.",
            inline=False
        )
        embed.set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/174/174855.png")
        await ctx.send(embed=embed)
        return
    
    # Placeholder for Instagram integration
    embed = discord.Embed(
        title=f"üì∏ Instagram: {username}",
        description="Perfil do Instagram (simulado)",
        color=0xe4405f
    )
    embed.add_field(name="üë• Seguidores", value="10.2K", inline=True)
    embed.add_field(name="üì∏ Posts", value="234", inline=True)
    embed.add_field(name="üë§ Seguindo", value="892", inline=True)
    embed.add_field(
        name="üìù Bio:",
        value="Esta √© uma simula√ß√£o do sistema Instagram.\nEm breve teremos integra√ß√£o real!",
        inline=False
    )
    embed.set_footer(text="Sistema em desenvolvimento - dados simulados")
    
    await ctx.send(embed=embed)

# ================= RUN BOT =================
if __name__ == "__main__":
    token = os.getenv('DISCORD_TOKEN')
    if not token:
        print("‚ùå Token do Discord n√£o encontrado! Configure a vari√°vel DISCORD_TOKEN.")
        sys.exit(1)
    
    print("üöÄ Iniciando bot...")
    bot.run(token)